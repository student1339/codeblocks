/*
用函数编程实现输出 m~n之间所有素数，并求和，m和n由键盘输入。
素数是只能被1和自身整除的大于1的正整数。 
要求程序能对用户输入的数据进行正确性检查，满足条件：m和n都是大于1的正整数，并且m<=n。
*/
#include<stdio.h>
#include<math.h>

unsigned int InputNumber(char ch);
int IsPrime(unsigned int n );

int main()
{
    int m,n,flag,sum=0;
    m=InputNumber('m');
    n=InputNumber('n');

    while(m>n)
    {
        printf("n must be not smaller than m! Input again!\n");
        m=InputNumber('m');
        n=InputNumber('n');
    }

    for(int i=m;i<=n;i++)
    {
        flag=IsPrime(i);
        if(flag)
        {
                printf("%d\n",i);
                sum+=i;
        }
    }

    printf("sum of prime numbers:%d",sum);
    return 0;
}

unsigned int InputNumber(char ch)
{
    int ret,n;
    printf("Please input the number %c(>1):",ch);
    ret=scanf("%d",&n);

    while(!ret || n<=1)
    {
        printf("The input must be an integer larger than 1!\n");
        printf("Please input the number %c(>1):",ch);
        while(getchar()!='\n');
        ret=scanf("%d",&n);             //清空缓存区并重新输入
    }
    return n;
}
// 函数功能：判断x是否是素数，若函数返回0，则表示不是素数，若返回1，则代表是素数
int IsPrime(unsigned int n )
{
    int i, flag = 1;
    int squareRoot = (int)sqrt(n);
    if (n <= 1)
        flag = 0;     // 负数、0和1都不是素数
    for (i = 2; i <= squareRoot && flag; i++)
    {
        if (n % i == 0)
            flag = 0; // 若能被整除，则不是素数
    }
    return flag;
}
